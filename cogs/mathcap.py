import disnake
from disnake.ext import commands
from disnake.ui import TextInput
from disnake import TextInputStyle
from utils.databases import UsersDataBase
from .select import SelectGames2

class Matchcap(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def create_close(self, inter: disnake.AppCmdInter, rl_name: str):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –º–∞—Ç—á–∞"""
        guild_id = inter.guild.id
        user_id = inter.user.id
        guild = self.bot.get_guild(guild_id)

        hp = await UsersDataBase().get_user(user_id)
        if not hp:
            return await inter.send("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
        expected_players = int(hp[0][7].split('_')[1][0]) * 2
        if hp[0][10] != expected_players:
            return await inter.send(f"–ù–µ—Ç **{expected_players}** —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∏–≥—Ä—ã!", ephemeral=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = await UsersDataBase().get_user_vse(user_id)

        stop = []
        trep1, trep2, g = None, None, 0

        for i in players:
            stop.append(i[2])
            if i[14] == 1:
                g += 1
                trep1 = i[2]
            elif i[14] == 2:
                g += 1
                trep2 = i[2]

        # –ï—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–µ—Ç ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        if g != 2:
            embed = disnake.Embed(
                title=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–º - {inter.user.name}",
                description=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤",
                color=disnake.Color.blurple()
            )
            avatar = inter.user.display_avatar.url
            embed.set_thumbnail(url=avatar)

            view = disnake.ui.View(timeout=None)
            view.add_item(SelectGames2(inter.user.id, guild.id, stop, self.bot))  # ‚Üê —Ç–≤–æ–π —Å–µ–ª–µ–∫—Ç

            return await inter.send(embed=embed, view=view, ephemeral=True)

        # –ï—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω—ã –µ—Å—Ç—å ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–∞–ª–∫—É
        modal = self.MatchDataModal(self.bot, guild_id, user_id, hp, trep1, trep2, rl_name)
        await inter.response.send_modal(modal=modal)

    # ---------------- –ú–û–î–ê–õ–ö–ê ----------------
    class MatchDataModal(disnake.ui.Modal):
        def __init__(self, bot, guild_id, user_id, hp, trep1, trep2, rl_name):
            self.bot = bot
            self.guild_id = guild_id
            self.user_id = user_id
            self.hp = hp
            self.trep1 = trep1
            self.trep2 = trep2
            self.rl_name = rl_name

            components = [
                TextInput(
                    label="–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–±–±–∏, –ø–∞—Ä–æ–ª—å –∏ —Ç.–ø.",
                    custom_id="match_data",
                    style=TextInputStyle.paragraph,
                )
            ]
            super().__init__(title="–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã", components=components)

        async def callback(self, inter: disnake.ModalInteraction):
            await inter.response.defer(with_message=False)

            guild = self.bot.get_guild(self.guild_id)
            channel = self.bot.get_channel(self.hp[0][4])
            match_msg = channel.get_partial_message(self.hp[0][13])

            # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ–π
            embed = disnake.Embed(
                title="–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å",
                description="**–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—ã —Å–≤–æ–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤.**\n"
                            "*P.S. –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞*"
            )
            for key, value in inter.text_values.items():
                embed.add_field(name=key, value=f"```\n{value[:1024]}```", inline=False)

            # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            players = await UsersDataBase().get_user_vse(self.user_id)
            for i in players:
                member = guild.get_member(i[2]) or await guild.fetch_member(i[2])
                overwrite = disnake.PermissionOverwrite(view_channel=True)
                await channel.set_permissions(member, overwrite=overwrite)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await match_msg.edit(embed=embed, components=[
                disnake.ui.Button(
                    label="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É",
                    style=disnake.ButtonStyle.green,
                    custom_id=f"–≤—ã–±–æ—Ä_{inter.user.id}_{self.guild_id}_{self.rl_name}"
                )
            ])

            # –¢—É—Ç –∂–µ —Å–æ–∑–¥–∞—ë–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≤—ã–¥–∞—ë–º –ø—Ä–∞–≤–∞
            await self._create_voice_channels(inter, guild, channel)

        async def _create_voice_channels(self, inter, guild, text_channel):
            """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤"""
            rl_name = self.rl_name
            trep1, trep2 = self.trep1, self.trep2
            hp = self.hp

            if rl_name == 'DOTA2':
                av, bv = 'üÖ∞Ô∏è The Radiant', 'üÖ±Ô∏è The Dire'
            else:
                av, bv = 'üÖ∞Ô∏è Team A', 'üÖ±Ô∏è Team B'

            main_channel = guild.get_channel(hp[0][4])
            category = main_channel.category

            vc1 = await guild.create_voice_channel(av, category=category)
            vc2 = await guild.create_voice_channel(bv, category=category)

            await UsersDataBase().update_channel3(vc1.id, self.user_id)
            await UsersDataBase().update_channel4(vc2.id, self.user_id)

            conf = await UsersDataBase().get_config_by_guild(inter.guild.id)
            role_evri = guild.get_role(int(conf['role_id_evri']))
            role_closeban = guild.get_role(int(conf['closeban_id']))
            role_closemod = guild.get_role(int(conf['role_closemod_id']))
            captain1 = guild.get_member(trep1) or await guild.fetch_member(trep1)
            captain2 = guild.get_member(trep2) or await guild.fetch_member(trep2)
            moderator = guild.get_member(inter.user.id) or await guild.fetch_member(inter.user.id)

            # –î–æ—Å—Ç—É–ø RL
            await vc1.set_permissions(moderator, view_channel=True, connect=True)
            await vc2.set_permissions(moderator, view_channel=True, connect=True)

            # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
            await vc1.set_permissions(role_evri, connect=False)
            await vc2.set_permissions(role_evri, connect=False)

            # –ë–∞–Ω —Ä–æ–ª—å
            await vc1.set_permissions(role_closeban, view_channel=False)
            await vc2.set_permissions(role_closeban, view_channel=False)

            # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
            await vc1.set_permissions(role_closemod, view_channel=True, connect=True, mute_members=True,
                                          move_members=True)
            await vc2.set_permissions(role_closemod, view_channel=True, connect=True, mute_members=True,
                                          move_members=True)

            # –î–æ—Å—Ç—É–ø –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            await vc1.set_permissions(captain1, view_channel=True, connect=True)
            await vc2.set_permissions(captain2, view_channel=True, connect=True)

            embed = disnake.Embed(
                title="–ö–∞–ø–∏—Ç–∞–Ω—ã",
                description=f"üÖ∞Ô∏è <@{captain1.id}>\n\nüÖ±Ô∏è <@{captain2.id}>"
            )
            result_msg = await text_channel.send(embed=embed)
            await UsersDataBase().update_messeg3(result_msg.id, self.user_id)

def setup(bot: commands.Bot):
    bot.add_cog(Matchcap(bot))
